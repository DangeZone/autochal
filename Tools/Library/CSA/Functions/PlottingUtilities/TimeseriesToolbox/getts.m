% GETTS Retrieves timeseries from a structure of timeseries.
% -------------------------- UNCLASSIFIED ---------------------------
% ------------------ ITAR Controlled Work Product -------------------
% -------------- Northrop Grumman Proprietary Level 1 ---------------
% getts:
% Retrieves timeseries from a structure of timeseries.  Used by
% PlotMeasurands and PlotMeasurandsXY.
% 
% SYNTAX:
%	[ts] = getts(Results, cellData2Plot, toffset, varargin, 'PropertyName', PropertyValue)
%	[ts] = getts(Results, cellData2Plot, toffset, varargin)
%	[ts] = getts(Results, cellData2Plot, toffset)
%	[ts] = getts(Results, cellData2Plot)
%
% INPUTS: 
%	Name         	Size		Units		Description
%  Results          Results structure generated by ParseRecordedData2ts
%  cellData2Plot    [string] or {cell}  Data to plot
%  toffset          [sec]       Offset time
%	varargin	[N/A]		[varies]	Optional function inputs that
%	     		        				 should be entered in pairs.
%	     		        				 See the 'VARARGIN' section
%	     		        				 below for more details
%
% OUTPUTS: 
%	Name         	Size		Units		Description
%	ts  	           <size>		<units>		<Description> 
%
% NOTES:
%  This function uses VSI_LIB functions  'conversions' and
%  'format_varargin'
%
%	VARARGIN PROPERTIES:
%	PropertyName		PropertyValue	Default		Description
%	<PropertyName>		<units>			<Default>	<Description>
%
% EXAMPLES:
%	% <Enter Description of Example #1>
%	[ts] = getts(Results, cellData2Plot, toffset, varargin)
%	% <Copy expected outputs from Command Window>
%
%	% <Enter Description of Example #2>
%	[ts] = getts(Results, cellData2Plot, toffset)
%	% <Copy expected outputs from Command Window>
%
% SOURCE DOCUMENTATION:
% <Enter as many sources as needed.  Some popular ones are listed here.>
% <Note, these citation examples came from: http://honolulu.hawaii.edu/legacylib/mlahcc.html >
% Website Citation:
% [1]   Author.  "Title of Web Page." Title of the Site. Editor. Dat and/or Version Number.
%       Date of Access <URL>
% Book with One Author:
% [2]   Author Last Name, Author First Name. Title of Book. City of Publication: Publisher, Year. Eqn #, pg #
% Book with Two Author:
% [3]   Author #1 Last Name, Author #1 First Name, and Author #2 Full Name. Title of Book. City of Publication: Publisher, Year. Eqn #, pg #
%
% HYPERLINKS:
%	Source function: <a href="matlab:edit getts.m">getts.m</a>
%	  Driver script: <a href="matlab:edit Driver_getts.m">Driver_getts.m</a>
%	  Documentation: <a href="matlab:pptOpen('getts_Function_Documentation.pptx');">getts_Function_Documentation.pptx</a>
%
% See also conversions, format_varargin
%
%
% VERIFICATION DETAILS:
% Verified: No
% Trac Page: http://vodka.ccc.northgrum.com/trac/CSA/ticket/518
%
% Copyright Northrop Grumman Corp 2011
% Maintained by: GN&C Technology (Dept 9V21): Aerospace Systems - Redondo Beach, CA
% http://vodka.ccc.northgrum.com/trac/CSA/

% Subversion Revision Information At Last Commit
% $URL: https://svn.ngst.northgrum.com/repos/CSA/trunk/CSA/Functions/PlottingUtilities/TimeseriesToolbox/getts.m $
% $Rev: 3259 $
% $Date: 2014-10-07 14:51:34 -0500 (Tue, 07 Oct 2014) $
% $Author: sufanmi $

function [ts] = getts(Results, cellData2Plot, toffset, varargin)

%% Debugging & Display Utilities:
spc  = sprintf(' ');                                % One Single Space
tab  = sprintf('\t');                               % One Tab
endl = sprintf('\n');                               % Line Return
[mfpath,mfnam] = fileparts(mfilename('fullpath'));  % Full Path to Function, Name of Function
mfspc = char(ones(1,length(mfnam))*spc);            % String of Spaces the length of the function name
mlink = ['<a href = "matlab:help ' mfnam '">' mfnam '</a>']; % Hyperlink to mask help that can be added to a error disp

% Examples of Different Display Formats:
% disp([mfnam '>> Output with filename included...' ]);
% disp([mfspc '>> further outputs will be justified the same']);
% disp([mfspc '>> CAUTION: or mfnam: note lack of space after">>"']);
% disp([mfnam '>> WARNING: <- Very important warning (does not terminate)']);
% disp([mfnam '>> ERROR: <-if followed by "return" used if continued exit desired']);
% errstr = [mfnam '>> ERROR: <define error here> See ' mlink ' help'];      % <-- Couple with error function
% error([mfnam 'class:file:Identifier'], errstr);    % Call error function with error string

%% Initialize Outputs:
% ts= -1;

%% Input Argument Conditioning:
% Pick out Properties Entered via varargin
% [<PropertyValue>, varargin]  = format_varargin('<PropertyValue', <Default>, 2, varargin);

%  switch(nargin)
%       case 0
%        toffset= ''; cellData2Plot= ''; Results= ''; 
%       case 1
%        toffset= ''; cellData2Plot= ''; 
%       case 2
%        toffset= ''; 
%       case 3
%        
%       case 4
%        
%  end
%
%  if(isempty(toffset))
%		toffset = -1;
%  end
%% Main Function:
% conversions;

if nargin < 3
    toffset = 0;
end

try
    if(iscell(cellData2Plot))
        strData2Plot = cellData2Plot{1};
        dim2plot = cellData2Plot{2};
        flgDownSelect = 1;
    else
        strData2Plot = cellData2Plot;
        flgDownSelect = 0;
        
        ptrTimes = strfind(strData2Plot, '*');
        strUnitsMult = '';
        if(~isempty(ptrTimes))
            strUnitsMult = strData2Plot((ptrTimes+1):end);
            ratioMult = evalin('base', strUnitsMult);
            
            if(ratioMult == -1)
                strNameAdd = '-';
            else
                strNameAdd = '';
            end
            
            strfrom = '';
            strto = '';
            
          
            
            try
            strUnitsMult = strrep(strUnitsMult, 'C.', '');
            ptr2 = strfind(strUnitsMult, '_2_');
            if(~isempty(ptr2))
                strfrom = lower(strUnitsMult(1:(ptr2-1)));
                strto = lower(strUnitsMult((ptr2+3):end));
            else
                ptr2 = strfind(strUnitsMult, '2');
                strfrom = lower(strUnitsMult(1:(ptr2-1)));
                strto = lower(strUnitsMult((ptr2+1):end));
            end
            
            
              if(strfind(strUnitsMult, 'R2D'))
                strfrom = 'rad';
                strto = 'deg';
            end
            
            if(strfind(strUnitsMult, 'D2R'))
                strfrom = 'deg';
                strto = 'rad';
            end
            
            catch
            end

            
            strData2Plot = strData2Plot(1:(ptrTimes(1)-1));
        end
        
        ptrParen = strfind(strData2Plot, '(');
        ptrPound = strfind(strData2Plot, '#');
        if(~isempty(ptrParen))
            
            strEnd = strData2Plot(ptrParen:end);
            strEnd = strrep(strEnd, '(', '');
            strEnd = strrep(strEnd, ':', '');
            strEnd = strrep(strEnd, '(,', '');
            strEnd = strrep(strEnd, ')', '');
            dim2plot = str2num(strEnd);
            
            strData2Plot = strData2Plot(1:(ptrParen-1));
            flgDownSelect = 1;
        elseif(~isempty(ptrPound))
             strEnd = strData2Plot(ptrPound(end)+1:end);
             dim2plot = str2num(strEnd)+1;  % Zero to one-based indexing
            
            strData2Plot = strData2Plot(1:(ptrPound(end)-2));
            flgDownSelect = 1;
        end

    end
    
    ts = eval(sprintf('Results.%s;', strData2Plot));
    ts.Time = ts.Time + toffset;
    
    if(~isempty(strUnitsMult))
        ts.Data = ts.Data * ratioMult;
        ts.DataInfo.units = strrep(ts.DataInfo.units, strfrom, strto);
        ts.Name = [strNameAdd ts.Name];
    end
    
    if(flgDownSelect)
        ts.Data = ts.Data(:,dim2plot);
        ts.Name = sprintf('%s(:,%d)', ts.Name, dim2plot);
    end
    
    % Resample if Desired:
    curStartTime = ts.TimeInfo.Start;
    curEndTime = ts.TimeInfo.End;
    [StartTime, varargin]   = format_varargin('xmin', curStartTime, 0, varargin);
    [EndTime, varargin]     = format_varargin('xmax', curEndTime, 0, varargin);
    ts2 = getsampleusingtime(ts,StartTime,EndTime);
    ts2.Name = ts.Name;
    ts = ts2;
    
catch
    disp(sprintf('%s : WARNING : ''%s'' does NOT exist in inputted ''Results''...', ...
        mfilename, strData2Plot));
    ts = [];
    return;
end

%% Compile Outputs:
%	ts= -1;

end % << End of function getts >>

%% REVISION HISTORY
% YYMMDD INI: note
% 101026 JPG: Copied over information from the old function.
% 101026 CNF: Function template created using CreateNewFunc
%**Add New Revision notes to TOP of list**

% Initials Identification: 
% INI: FullName             :  Email                :  NGGN Username 
% JPG: James Patrick Gray   :  james.gray2@ngc.com  :  g61720 

%% FOOTER
%
% WARNING - This document contains technical data whose export is
%   restricted by the Arms Export Control Act (Title 22, U.S.C. 2751 et 
%   seq.) or the Export Administration Act of 1979, as amended, Title 50,
%   U.S.C., App.2401et seq. Violation of these export-control laws is 
%   subject to severe civil and/or criminal penalties.
%
% -------------- Northrop Grumman Proprietary Level 1 ---------------
% ------------------ ITAR Controlled Work Product -------------------
% -------------------------- UNCLASSIFIED ---------------------------

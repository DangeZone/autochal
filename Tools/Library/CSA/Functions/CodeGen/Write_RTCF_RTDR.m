% WRITE_RTCF_RTDR Builds EBS version of RTCF Real Time Data Recorder (RTDR)
% -------------------------- UNCLASSIFIED ---------------------------
% ------------------ ITAR Controlled Work Product -------------------
% -------------- Northrop Grumman Proprietary Level 1 ---------------
% Write_RTCF_RTDR:
%   Builds the .ebs version of file declaring which RTCF connection signals
%   need to be recorded by the RTCF real time data recorder (RTDR).
%
% SYNTAX:
%	[lstFiles] = Write_RTCF_RTDR(lstBO, strComponent, varargin, 'PropertyName', PropertyValue)
%	[lstFiles] = Write_RTCF_RTDR(lstBO, strComponent, varargin)
%	[lstFiles] = Write_RTCF_RTDR(lstBO, strComponent)
%
% INPUTS:
%	Name            Size		Units		Description
%	lstBO           {n x 1}     {'string'}  List of RTCF Connection Points
%	strComponent    'string'    [char]      Name of RTCF Component
%	varargin        [N/A]		[varies]	Optional function inputs that
%                                           should be entered in pairs.
%                                           See the 'VARARGIN' section
%                                           below for more details
%
% OUTPUTS:
%	Name            Size		Units		Description
%	lstFiles       {'string'}   [char]      Name of created file(s)
%
% NOTES:
%	This function uses the CSA functions: format_varagin,
%	CreateNewFile_Defaults
%
%	VARARGIN PROPERTIES:
%	PropertyName		PropertyValue	Default		Description
%   'MarkingsFile'      'string'        'CreateNewFile_Defaults'
%                                                   MATLAB .m file
%                                                    containing requisite
%                                                    program markings
%   'RecordRate'         [Hz]            100        Rate at which to record
%                                                    data
%   'FileFormat'        'string'        'ebs'      Extension of desired
%                                                    output filetype.
%                                                    Supported types:
%                                                    'ebs', 'py', 'rtdr'
%   'SaveFolder'        'string'        'pwd'       Folder in which to
%                                                    create the file
%   'FilePrefix'        'string'        'RTDR_'     Prefix to append to
%                                                    each filename
%                                                   (if autogenerated)
%   'Filename'          'string'        ''          Root name of desired
%                                                    output file
%   'MaxSignals'        [int]           64          Maximum number of
%                                                    recorded signals per
%                                                    data recorder (function
%                                                    will create multiple
%                                                    files if list exceeds
%                                                    limit)
%   'OpenAfterCreated'  [bool]          true        Open the generated
%                                                    files in MATLAB's
%                                                    editor after
%                                                    creation?
%   'binEnvVar'         'string'        'BIN_DIR'   Environment variable
%                                                    used to define the 
%                                                    local 'bin' directory
%
% EXAMPLES:
%	% Create a Sample RTDR file for an Air Data Application:
%   lstSignals = {}; i = 0;
%   i = i + 1; lstSignals(i,:) = {'IN.MeasuredTrueAirspeed_kts'};
%   i = i + 1; lstSignals(i,:) = {'IN.MeasuredStaticPress_psi'};
%   i = i + 1; lstSignals(i,:) = {'IN.BaroSetting_inHg'};
%   i = i + 1; lstSignals(i,:) = {'IN.OutsideAirTemp_degC'};
%   i = i + 1; lstSignals(i,:) = {'IN.MeasuredSideslip_deg'};
%
%   strComponent    = 'ADA';    % (A)ir (D)ata (A)pplication
%   filename        = 'RTDR_ADA_IN';
%   RecordRate      = 25;       % [Hz]
%
%	[filename] = Write_RTCF_RTDR(lstSignals, strComponent, ...
%                   'Filename', filename);
%
% SOURCE DOCUMENTATION:
%
% HYPERLINKS:
%	Source function: <a href="matlab:edit Write_RTCF_RTDR.m">Write_RTCF_RTDR.m</a>
%	  Driver script: <a href="matlab:edit Driver_Write_RTCF_RTDR.m">Driver_Write_RTCF_RTDR.m</a>
%	  Documentation: <a href="matlab:pptOpen('Write_RTCF_RTDR_Function_Documentation.pptx');">Write_RTCF_RTDR_Function_Documentation.pptx</a>
%
% See also format_varargin
%
%
% VERIFICATION DETAILS:
% Verified: No
% Trac Page: http://vodka.ccc.northgrum.com/trac/CSA/ticket/630
%
% Copyright Northrop Grumman Corp 2011
% Maintained by: GN&C Technology (Dept 9V21): Aerospace Systems - Redondo Beach, CA
% http://vodka.ccc.northgrum.com/trac/CSA/

% Subversion Revision Information At Last Commit
% $URL: https://svn.ngst.northgrum.com/repos/CSA/trunk/CSA/Functions/CodeGen/Write_RTCF_RTDR.m $
% $Rev: 3228 $
% $Date: 2014-08-05 14:28:27 -0500 (Tue, 05 Aug 2014) $
% $Author: sufanmi $

function [lstFiles] = Write_RTCF_RTDR(lstSignals, strComponent, varargin)

%% Debugging & Display Utilities:
spc  = sprintf(' ');                                % One Single Space
tab  = sprintf('\t');                               % One Tab
endl = sprintf('\n');                               % Line Return
[mfpath,mfnam] = fileparts(mfilename('fullpath'));  % Full Path to Function, Name of Function
mfspc = char(ones(1,length(mfnam))*spc);            % String of Spaces the length of the function name
mlink = ['<a href = "matlab:help ' mfnam '">' mfnam '</a>']; % Hyperlink to mask help that can be added to a error disp

% Examples of Different Display Formats:
% disp([mfnam '>> Output with filename included...' ]);
% disp([mfspc '>> further outputs will be justified the same']);
% disp([mfspc '>> CAUTION: or mfnam: note lack of space after">>"']);
% disp([mfnam '>> WARNING: <- Very important warning (does not terminate)']);
% disp([mfnam '>> ERROR: <-if followed by "return" used if continued exit desired']);
% errstr = [mfnam '>> ERROR: <define error here> See ' mlink ' help'];      % <-- Couple with error function
% error([mfnam 'class:file:Identifier'], errstr);    % Call error function with error string

%% Input Argument Conditioning:
% Pick out Properties Entered via varargin
[MarkingsFile, varargin]    = format_varargin('MarkingsFile', 'CreateNewFile_Defaults',  2, varargin);
[RecordRate, varargin]      = format_varargin('RecordRate', 100,  2, varargin);
[lstExt, varargin]          = format_varargin('FileFormat', {'ebs'},  2, varargin);
[SaveFolder, varargin]      = format_varargin('SaveFolder', pwd,  2, varargin);
[FilePrefix, varargin]      = format_varargin('FilePrefix', 'RTDR_',  2, varargin);
[filename, varargin]        = format_varargin('Filename', '',  2, varargin);
[MaxSignals, varargin]      = format_varargin('MaxSignals', 64,  2, varargin);
[OpenAfterCreated, varargin]= format_varargin('OpenAfterCreated', true,  2, varargin);
[flgVerbose, varargin]      = format_varargin('Verbose', true,  2, varargin);
[SCMFormat, varargin]       = format_varargin('SCMFormat', 'SVN', 2, varargin);
[binEnvVar, varargin]       = format_varargin('binEnvVar', 'BIN_DIR', 2, varargin);

if(isempty(filename))
    filename = [FilePrefix strComponent];
end
filename_root = filename;

if(ischar(lstExt))
    lstExt = { lstExt };
end

%% Main Function:
numSignals = size(lstSignals, 1);
iLoop = 0;

numExt = size(lstExt, 1);
for iExt = 1:numExt
    strExt = lower(lstExt{iExt, 1});
    
    switch strExt
        case 'ebs'
            strComment =  ''' ';
        case 'py'
            strComment = '# ';
        case 'rtdr'
            strComment = '# ';
    end
    
    %% Load in Default Markings:
    if(exist(MarkingsFile) == 2)
        eval(sprintf('CNF_info = %s(strComment, mfnam);', MarkingsFile));
    else
        CNF_info_Def = CreateNewFile_Defaults(strComment, mfnam);
    end
    
    switch strExt
        case 'rtdr'
            % Splitting of CPs is handled on the RTCF/python side.  Don't
            % need to split up list.  Just need proper python formatting
            filename = filename_root;
            iStart = 1;
            iEnd = numSignals;
            
            %% ========================================================================
            %  Generate File 1 of 2: _wrap.h
            fstr = [];
            fstr = [fstr strComment 'RTDR Data Recorder for: ' filename endl];
            
            if ~isempty(SCMFormat)
                switch SCMFormat
                    case 'SVN'
                        % NOTE: spaces added to prevent keyword substitution on this line
                        fstr = [fstr strComment endl]; %Blank Line
                        fstr = [fstr strComment 'Subversion Revision Information At Last Commit' endl];
                        fstr = [fstr strComment '$URL: ' '$' endl];
                        fstr = [fstr strComment '$Rev: ' '$' endl];
                        fstr = [fstr strComment '$Date: ' '$' endl];
                        fstr = [fstr strComment '$Author: ' '$' endl];
                end
            end

            %% Main Chunk
            fstr = [fstr endl];
            
            for iConn = iStart:iEnd
                curConnName = lstSignals{iConn};
                fstr = [fstr sprintf('%s.%s', strComponent, curConnName) endl];
            end

            % Write header
            info.fname = [filename '.' strExt];
            
            info.fname_full = [SaveFolder filesep info.fname];
            iLoop = iLoop + 1;
            lstFiles(iLoop,:) = { info.fname_full };
            info.text = fstr;
            
            if(~isdir(SaveFolder))
                mkdir(SaveFolder);
            end
            
            [fid, message ] = fopen(info.fname_full, 'wt','native');
            
            if fid == -1
                info.error = [mfnam '>> ERROR: File Not created: ' message];
                disp(info.error)
                return
            else %any answer besides 'Y'
                fprintf(fid,'%s',fstr);
                fclose(fid);
                if(OpenAfterCreated)
                    edit(info.fname_full);
                end
                info.OK = 'maybe it worked';
            end
            
            if(flgVerbose == 1)
                disp(sprintf('%s : ''%s.%s'' has been created in %s', mfnam, filename, strExt, SaveFolder));
            end
            
        case 'py'
            % Splitting of CPs is handled on the RTCF/python side.  Don't
            % need to split up list.  Just need proper python formatting
            filename = filename_root;
            strRTDR = ['rtdr_' filename];
            iStart = 1;
            iEnd = numSignals;
            
            %% ========================================================================
            %  Generate File 1 of 2: _wrap.h
                       fstr = [];
            fstr = [fstr strComment 'RTDR Data Recorder for: ' filename endl];
            
            if ~isempty(SCMFormat)
                switch SCMFormat
                    case 'SVN'
                        % NOTE: spaces added to prevent keyword substitution on this line
                        fstr = [fstr strComment endl]; %Blank Line
                        fstr = [fstr strComment 'Subversion Revision Information At Last Commit' endl];
                        fstr = [fstr strComment '$URL: ' '$' endl];
                        fstr = [fstr strComment '$Rev: ' '$' endl];
                        fstr = [fstr strComment '$Date: ' '$' endl];
                        fstr = [fstr strComment '$Author: ' '$' endl];
                end
            end
            
            %% Main Chunk
            fstr = [fstr endl];
            fstr = [fstr 'import os' endl];
            fstr = [fstr 'import RTCF' endl];
            fstr = [fstr 'import RTCF_RTDR' endl];
            fstr = [fstr endl];
            fstr = [fstr 'def CreateRTDR(self):' endl];
            fstr = [fstr tab 'savedir = os.path.abspath(os.path.join(RTCF.findBinDirectory(), "..\data"))' endl];
            fstr = [fstr tab 'name_root = "' filename '"' endl];
            fstr = [fstr tab 'rate = ' num2str(RecordRate) endl];
            fstr = [fstr endl];
            
            for iConn = iStart:iEnd
                curConnName = lstSignals{iConn};
                if(iConn == iStart)
                    fstr = [fstr tab sprintf('rtdrList = ["%s.%s",', strComponent, curConnName) endl];
                elseif(iConn == iEnd)
                    fstr = [fstr tab tab tab tab sprintf('"%s.%s"]', strComponent, curConnName) endl];
                else
                    fstr = [fstr tab tab tab tab sprintf('"%s.%s",', strComponent, curConnName) endl];
                end
            end
            
            fstr = [fstr endl];
            fstr = [fstr tab 'RTCF_RTDR.CreateRTDR(self, savedir, name_root, rtdrList, rate)' endl];
            fstr = [fstr endl];

            % Write header
            info.fname = [filename '.' strExt];
            
            info.fname_full = [SaveFolder filesep info.fname];
            iLoop = iLoop + 1;
            lstFiles(iLoop,:) = { info.fname_full };
            info.text = fstr;
            
            if(~isdir(SaveFolder))
                mkdir(SaveFolder);
            end
            
            [fid, message ] = fopen(info.fname_full, 'wt','native');
            
            if fid == -1
                info.error = [mfnam '>> ERROR: File Not created: ' message];
                disp(info.error)
                return
            else %any answer besides 'Y'
                fprintf(fid,'%s',fstr);
                fclose(fid);
                if(OpenAfterCreated)
                    edit(info.fname_full);
                end
                info.OK = 'maybe it worked';
            end
            
            if(flgVerbose == 1)
                disp(sprintf('%s : ''%s.%s'' has been created in %s', mfnam, filename, strExt, SaveFolder));
            end
            
            %%
        case 'ebs'
            
            numLoops = ceil(numSignals/MaxSignals);
            lstFiles = cell(numLoops, 1);
            iStart = 1;
            for curLoop = 1:numLoops
                
                if(numLoops > 1)
                    filename = [filename_root num2str(curLoop)];
                    iEnd = iStart + MaxSignals - 1;
                else
                    iEnd = MaxSignals - 1;
                end
                iEnd = min(iEnd, numSignals);
                
                strRTDR = ['rtdr_' filename];
                
                %% ========================================================================
                            fstr = [];
            fstr = [fstr strComment 'RTDR Data Recorder for: ' filename endl];
            
            if ~isempty(SCMFormat)
                switch SCMFormat
                    case 'SVN'
                        % NOTE: spaces added to prevent keyword substitution on this line
                        fstr = [fstr strComment endl]; %Blank Line
                        fstr = [fstr strComment 'Subversion Revision Information At Last Commit' endl];
                        fstr = [fstr strComment '$URL: ' '$' endl];
                        fstr = [fstr strComment '$Rev: ' '$' endl];
                        fstr = [fstr strComment '$Date: ' '$' endl];
                        fstr = [fstr strComment '$Author: ' '$' endl];
                end
            end
                
                %% Main Chunk
                fstr = [fstr endl];
                fstr = [fstr 'public RTCF as object' endl];
                fstr = [fstr endl];
                fstr = [fstr 'Option Explicit' endl];
                fstr = [fstr endl];
                fstr = [fstr 'dim ' strRTDR ' as object' endl];
                fstr = [fstr endl];
                fstr = [fstr 'Sub init( args As String)' endl];
                fstr = [fstr endl];
                fstr = [fstr tab 'Dim ' binEnvVar '$' endl];
                fstr = [fstr tab 'Dim datafile As String' endl];
                fstr = [fstr tab 'Dim rtdr As String' endl];
                fstr = [fstr tab 'Dim testdir As String' endl];
                fstr = [fstr tab binEnvVar ' = Environ$("' binEnvVar '")' endl];
                fstr = [fstr tab 'testdir = ' binEnvVar ' + "\data\"' endl];
                fstr = [fstr tab endl];
                fstr = [fstr tab 'rtdr = "' filename '"' endl];
                fstr = [fstr tab 'datafile = testdir$ & "data_" & rtdr$ & ".csv"' endl];
                fstr = [fstr tab endl];
                fstr = [fstr tab 'RTCF.DeleteRTDR rtdr' endl];
                fstr = [fstr tab 'set ' strRTDR ' = RTCF.CreateRTDR( rtdr )' endl];
                fstr = [fstr tab endl];
                
                iCtr = -1;
                for iConn = iStart:iEnd
                    curConnName = lstSignals{iConn};
                    iCtr = iCtr + 1;
                    fstr = [fstr tab sprintf('%s( %3.0f ).connect  RTCF.%s.%s', ...
                        strRTDR, iCtr, strComponent, curConnName) endl];
                end
                
                fstr = [fstr endl];
                fstr = [fstr tab strRTDR '.initialize datafile$ & ";format=decimal;rate=' ...
                    num2str(RecordRate) '"' endl];
                fstr = [fstr endl];
                fstr = [fstr 'end Sub' endl];
                
                fstr = [fstr endl];

                % Write header
                info.fname = [filename '.' strExt];
                
                info.fname_full = [SaveFolder filesep info.fname];
                iLoop = iLoop + 1;
                lstFiles(iLoop,:) = { info.fname_full };
                info.text = fstr;
                
                if(~isdir(SaveFolder))
                    mkdir(SaveFolder);
                end
                
                [fid, message ] = fopen(info.fname_full, 'wt','native');
                
                if fid == -1
                    info.error = [mfnam '>> ERROR: File Not created: ' message];
                    disp(info.error)
                    return
                else %any answer besides 'Y'
                    fprintf(fid,'%s',fstr);
                    fclose(fid);
                    if(OpenAfterCreated)
                        edit(info.fname_full);
                    end
                    info.OK = 'maybe it worked';
                end
                
                if(flgVerbose == 1)
                    disp(sprintf('%s : ''%s.%s'' has been created in %s', mfnam, filename, strExt, SaveFolder));
                end
            end
            
            iStart = iEnd + 1;
            
    end
    
end % << End of function Write_RTCF_RTDR >>

%% REVISION HISTORY
% YYMMDD INI: note
% 110202 MWS: Created function using CreateNewFunc
%**Add New Revision notes to TOP of list**

% Initials Identification:
% INI: FullName         : Email                 : NGGN Username
% MWS: Mike Sufana      : mike.sufana@ngc.com   : sufanmi

%% FOOTER
%
% WARNING - This document contains technical data whose export is
%   restricted by the Arms Export Control Act (Title 22, U.S.C. 2751 et
%   seq.) or the Export Administration Act of 1979, as amended, Title 50,
%   U.S.C., App.2401et seq. Violation of these export-control laws is
%   subject to severe civil and/or criminal penalties.
%
% -------------- Northrop Grumman Proprietary Level 1 ---------------
% ------------------ ITAR Controlled Work Product -------------------
% -------------------------- UNCLASSIFIED ---------------------------
